version: '3.8'


networks:
  redpanda_network:
    driver: bridge
volumes:
  redpanda-1: null
services:
  redpanda-1:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda-1:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda-1:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda-1:33145
      - --advertise-rpc-addr redpanda-1:33145
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      # The amount of memory to make available to Redpanda.
      - --memory 1G
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Enable logs for debugging.
      - --default-log-level=debug
    image: docker.redpanda.com/redpandadata/redpanda:v23.3.6
    container_name: redpanda-1
    volumes:
      - redpanda-1:/var/lib/redpanda/data
    networks:
      - redpanda_network
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
  console:
    container_name: redpanda-console
    image: docker.redpanda.com/redpandadata/console:v2.4.3
    networks:
      - redpanda_network
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda-1:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda-1:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda-1:9644"]
    ports:
      - 8020:8080
    depends_on:
      - redpanda-1


  blog-mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: vs4tw
      MYSQL_USER: dbuser
      MYSQL_PASSWORD: dbuser
      MYSQL_DATABASE: blogdb
    ports:
      - "3306:3306"
    networks:
      - redpanda_network

  kafka-blog-backend:
    image: ghcr.io/ferberj/kafka-blog-backend:latest
    ports:
      - "8080:8080"
    depends_on:
      - blog-mysql
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:mysql://blog-mysql:3306/blogdb
      QUARKUS_DATASOURCE_USERNAME: dbuser
      QUARKUS_DATASOURCE_PASSWORD: dbuser
      QUARKUS_KAFKA_BOOTSTRAP_SERVERS: redpanda-1:9092   
    restart: on-failure
    networks:
      - redpanda_network

  kafka-validator:
    image: ghcr.io/ferberj/kafka-validator:latest
    environment:
      QUARKUS_KAFKA_BOOTSTRAP_SERVERS: redpanda-1:9092  
    networks:
      - redpanda_network

